
main:
la $t0, array # 移動陣列位置到t0
addi $a0, $t0, 0 # 設定陣列地址
addi $a1, $zero, 0 # 把low變0
addi $a2, $zero, 7 # 把hi變7
jal quicksort # 呼叫Quick sort
li $v0, 10 # 終止程式並離開
syscall 


swap:               

addi $sp, $sp, -12  # 創造三個整數空間

sw $a0, 0($sp)      # 儲存 a0
sw $a1, 4($sp)      # 儲存 a1
sw $a2, 8($sp)      # 儲存 a2

sll $t1, $a1, 2     #t1 = 4a
add $t1, $a0, $t1   #t1 = arr + 4a
lw $s3, 0($t1)      #s3  t = array[a]

sll $t2, $a2, 2     #t2 = 4b
add $t2, $a0, $t2   #t2 = arr + 4b
lw $s4, 0($t2)      #s4 = arr[b]

sw $s4, 0($t1)      #arr[a] = arr[b]
sw $s3, 0($t2)      #arr[b] = t 


addi $sp, $sp, 12   #還原
jr $ra          #回傳



partition:          

addi $sp, $sp, -16  #創造整數空間

sw $a0, 0($sp)      #儲存 a0
sw $a1, 4($sp)      #儲存 a1
sw $a2, 8($sp)      #儲存 a2
sw $ra, 12($sp)     #儲存回傳位置

move $s1, $a1       #s1 = low
move $s2, $a2       #s2 = high

sll $t1, $s2, 2     # t1 = 4*high
add $t1, $a0, $t1   # t1 = arr + 4*high
lw $t2, 0($t1)      # t2 = arr[high] //pivot

addi $t3, $s1, -1   #t3, i=low -1
move $t4, $s1       #t4, j=low
addi $t5, $s2, -1   #t5 = high - 1

forloop: 
    slt $t6, $t5, $t4   #t6=1 如果 j>high-1, t7=0 如果 j<=high-1
    bne $t6, $zero, endfor  #如果 t6=1 跳到 endfor

    sll $t1, $t4, 2     #t1 = j*4
    add $t1, $t1, $a0   #t1 = arr + 4j
    lw $t7, 0($t1)      #t7 = arr[j]

    slt $t8, $t2, $t7   #t8 = 1 如果 pivot < arr[j], 0 如果 arr[j]<=pivot
    bne $t8, $zero, endfif  #如果 t8=1 跳到 endfif
    addi $t3, $t3, 1    #i=i+1

    move $a1, $t3       #a1 = i
    move $a2, $t4       #a2 = j
    jal swap        #呼叫swap(arr, i, j)

    addi $t4, $t4, 1    #j++
    j forloop

    endfif:
    addi $t4, $t4, 1    #j++
    j forloop       #繼續迴圈

endfor:
    addi $a1, $t3, 1        #a1 = i+1
    move $a2, $s2           #a2 = high
    add $v0, $zero, $a1     #v0 = i+1 return (i + 1);
    jal swap            #呼叫swap(arr, i + 1, high);

    lw $ra, 12($sp)         #回傳地址
    addi $sp, $sp, 16       #回復
    jr $ra              #回傳

quicksort:              #quicksort method

addi $sp, $sp, -16      # 創造4個整數空間

sw $a0, 0($sp)          # a0
sw $a1, 4($sp)          # low
sw $a2, 8($sp)          # high
sw $ra, 12($sp)         # 回傳地址

move $t0, $a2           #存 high 在 t0

slt $t1, $a1, $t0       # t1=1 如果 low < high, else 0
beq $t1, $zero, endif       # 如果 low >= high, endif

jal partition           #呼叫 all partition 
move $s0, $v0           # pivot, s0= v0

lw $a1, 4($sp)          #a1 = low
addi $a2, $s0, -1       #a2 = pi -1
jal quicksort           #呼叫 quicksort

addi $a1, $s0, 1        #a1 = pi + 1
lw $a2, 8($sp)          #a2 = high
jal quicksort           #呼叫 quicksort

 endif:

lw $a0, 0($sp)          #回復 a0
lw $a1, 4($sp)          #回復 a1
lw $a2, 8($sp)          #回復 a2
lw $ra, 12($sp)         #回復回傳地址
addi $sp, $sp, 16       #回復堆疊
jr $ra              #回傳